.include "macros.s"


.set PILA, 0x4000               ;una posicion de memoria de una zona no ocupada para usarse como PILA


.text
        ; *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
        ; Inicializacion
        ; *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
        $MOVEI r1, RSG
        wrs    s5, r1      ;inicializamos en S5 la direccion de la rutina de antencion a la interrupcion
        $MOVEI r7, PILA    ;inicializamos R7 como puntero a la pila
        $MOVEI r6, inici   ;direccion de la rutina principal
        jmp    r6


RSG:    $PUSH r0, r1, r2, r3, r4, r5, r6 ;salvamos el estado en la pila

	rds r3, s2 ;     
        movi   r1, 6                     ;comprueba si es una interrupcion del interval timer
        cmpeq  r2, r1, r3
        bnz    r2, miss_tlbi
        movi   r1, 1                     ;comprueba si es una interrupcion del controlador de los pulsadores
        cmpeq  r2, r1, r3 
        bnz    r2, align_ex 
        movi   r1, 4                     ;comprueba si es una interrupcion del controlador de los interruptores
        cmpeq  r2, r1, r3
        bnz    r2, div_exc
end_int:
        $POP r6, r5, r4, r3, r2, r1, r0  ;restauramos el estado desde la pila (ojo orden inverso)
        reti




inici: 
        movi   r1, 0xF
        out     9, r1              ;activa todos los visores hexadecimales
     movi r1, 9 
     movi r2, 4 
     wrvi r2, r1 
     movi r1, 0x3d 
  	halt

	
miss_tlbi: movi r0, 15
	   out     6, r0
	   $MOVEI r6, end_int         ;direccion del fin del servicio de interrupcion
           jmp    r6 

align_ex: movi r0, 15
	   out     5, r0
	   $MOVEI r6, end_int         ;direccion del fin del servicio de interrupcion
           jmp    r6 


div_exc: movi r0, 1
	   out     10, r0
	   $MOVEI r6, end_int         ;direccion del fin del servicio de interrupcion
           jmp    r6 
